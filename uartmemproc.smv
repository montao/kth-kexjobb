MODULE data
 VAR
 	data : 0..255;
MODULE uart
-- ACTIVITIES
-- 1. Fill in the smv definitions
-- 2. Then run this file in interactive mode to see the states
--$ NuSMV -int
--NuSMV > read_model -i uart.smv
--NuSMV > flatten_hierarchy
--NuSMV > encode_variables
--NuSMV > build_model
--NuSMV > pick_state -i
-- NuSMV > simulate -i -k 15
VAR
-- system outputs
-- the model has states: idle, start, data, shift and wait
	Tx : data;
	Rx : data;
ASSIGN
	init (Tx) := 0;
	init (Rx) := 0;
MODULE proc
VAR

ASSIGN

MODULE mem
VAR
-- system outputs
-- the model has states: idle, start, data, shift and wait
	state : {idle, start, data, shift, wait};
	send : boolean;
	load : boolean;
	busy : boolean;
	resetcounter : boolean;
	resettimer : boolean;
	count10 : 1 .. 10;
	nextbit : boolean;
ASSIGN
	init (state) := idle;
	init (send) := TRUE;

	-- ACTIVITIES
	-- 1. Fill in the smv definitions
	-- 2. Then run this file in interactive mode to see the states
	--$ NuSMV -int
	--NuSMV > read_model -i uart.smv
	--NuSMV > flatten_hierarchy
	--NuSMV > encode_variables
	--NuSMV > build_model
	--NuSMV > pick_state -i
	-- NuSMV > simulate -i -k 15

MODULE main
VAR
	uart_var : uart;
	mem_var : mem;
	proc_var : proc;
	
SPEC AG (proc_var.out != write k ) -> AG( mem_var.k = (x mem.k))