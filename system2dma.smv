
MODULE UART (proc, proc2UARTvalue, proc2UARTAddress, uart2CPU, uart2mem,
uart2memValue)
VAR
	Rx : unsigned word [ 64 ]; -- receive from outside
	Tx : array 0 .. 7 of unsigned word [ 64 ]; --write data to wire
	
ASSIGN
	next (Tx[0]) :=
		case
			proc = write2UART & proc2UARTAddress = 0 : proc2UARTvalue;
			TRUE : (Tx[0]);
		esac;
	next (Tx[1]) :=
		case
			proc = write2UART & proc2UARTAddress = 1 : proc2UARTvalue;
			TRUE : (Tx[1]);
		esac;
	next (Tx[2]) :=
		case
			proc = write2UART & proc2UARTAddress = 2 : proc2UARTvalue;
			TRUE : (Tx[2]);
		esac;
	next (Tx[3]) :=
		case
			proc = write2UART & proc2UARTAddress = 3 : proc2UARTvalue;
			TRUE : (Tx[3]);
		esac;
	next (Tx[4]) :=
		case
			proc = write2UART & proc2UARTAddress = 4 : proc2UARTvalue;
			TRUE : (Tx[4]);
		esac;
	next (Tx[5]) :=
		case
			proc = write2UART & proc2UARTAddress = 5 : proc2UARTvalue;
			TRUE : (Tx[5]);
		esac;
	next (Tx[6]) :=
		case
			proc = write2UART & proc2UARTAddress = 6 : proc2UARTvalue;
			TRUE : (Tx[6]);
		esac;
	next (Tx[7]) :=
		case
			proc = write2UART & proc2UARTAddress = 7 : proc2UARTvalue;
			TRUE : (Tx[7]);
		esac;
	next (uart2CPU) :=
		case
			proc = read2UART : Rx;
			TRUE : Rx;
		esac;
MODULE MEM (proc, proc2memValue, proc2memAddress, mem2proc, uart2memValue,
DMAadress)
DEFINE
	secureAddress := 7;
VAR
	data : array 0 .. 512 of unsigned word [ 64 ];
ASSIGN
	next (mem2proc) :=
		case
			proc = read & proc2memAddress = 0 : data[0];
			proc = read & proc2memAddress = 1 : data[1];
			proc = read & proc2memAddress = 2 : data[2];
			proc = read & proc2memAddress = 3 : data[3];
			proc = read & proc2memAddress = 4 : data[4];
			proc = read & proc2memAddress = 5 : data[5];
			proc = read & proc2memAddress = 6 : data[6];
			proc = read & proc2memAddress = 7 : data[7];
			TRUE : mem2proc;
		esac;
	next (data[0]) :=
		case
			proc = write & proc2memAddress = 0 : proc2memValue;
			DMAadress = 0 : uart2memValue;
			TRUE : data[0];
		esac;
	next (data[secureAddress]) :=
		case
			proc = write & proc2memAddress = secureAddress : proc2memValue;
			DMAadress = secureAddress : uart2memValue;
			TRUE : data[secureAddress];
		esac;
MODULE DMA (proc, DMAmemAddress)
VAR
	address : 0 .. 512;
	control : unsigned word [ 64 ];
ASSIGN
	init (control) := 0ud64_57;
	next (address) :=
		case
			proc = setDMAaddress : DMAmemAddress;
			TRUE : address;
		esac;
MODULE main
VAR
	proc : {idle, read, write, read2UART, write2UART, setDMAaddress};
	proc2memAddress : 0 .. 512;
	DMAmemAddress : 0 .. 512;
	proc2UARTAddress : 0 .. 512;
	mem2proc : unsigned word [ 64 ];
	proc2memValue : unsigned word [ 64 ]; -- the data the CPU writes to memory
	uart2CPU : unsigned word [ 64 ]; -- the data the UART writes to the CPU
	uart2mem : unsigned word [ 64 ]; -- the data the UART writes to RAM (no DMA)
	proc2UARTvalue : unsigned word [ 64 ]; -- when the CPU writes to the UART (no DMA)
	uart2memValue : unsigned word [ 64 ]; -- external	
	memory : MEM (proc, proc2memValue, proc2memAddress, mem2proc, uart2mem,	
	DMAmemAddress);
	uart0 : UART (proc, proc2UARTvalue, proc2UARTAddress, uart2CPU, uart2mem,
	uart2memValue);
	dma : DMA (proc, DMAmemAddress);
ASSIGN
-- prove that secure memory is constant with DMA
	LTLSPEC G (proc = setDMAaddress & DMAmemAddress != memory.secureAddress) -> G
	(memory.data[memory.secureAddress] = next (memory.data[memory.secureAddress]))

	