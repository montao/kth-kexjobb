
MODULE main
VAR
	stateA : {idle, send1, receive1, send2, receive2, send3, receive3};
	stateB : {idle, send1, receive1};
	stateS : {idle, send1, receive1};
	stateT : {idle, send1, receive1};
	stateI : {idle, eavesdrop, remove, store, send};
	c_as_count_s : 0 .. 255;
	c_as_count_r : 0 .. 255;
	c_tgs_count_s : 0 .. 255;
	c_tgs_count_r : 0 .. 255;
	c_v_count_s : 0 .. 255;
	c_v_count_r : 0 .. 255;
	as_count_s : 0 .. 255;
	as_count_r : 0 .. 255;
	tgs_count_s : 0 .. 255;
	tgs_count_r : 0 .. 255;
	v_count_s : 0 .. 255;
	v_count_r : 0 .. 255;
ASSIGN
	init (stateA) := send1; --start by sending to S
	init (stateB) := idle;
	init (stateS) := idle;
	init (stateI) := idle; --initial states are idle
	init (c_as_count_s) := 0;
	init (c_as_count_r) := 0;
	init (c_tgs_count_s) := 0;
	init (c_tgs_count_r) := 0;
	init (c_v_count_s) := 0;
	init (c_v_count_r) := 0;
	init (as_count_s) := 0;
	init (as_count_r) := 0;
	init (tgs_count_s) := 0;
	init (tgs_count_r) := 0;
	init (v_count_s) := 0;
	init (v_count_r) := 0;
	next (stateA) :=
		case
			stateS = send1 : receive1;
			stateB = send1 : receive3;
			stateA = receive1 : send2;
			TRUE : stateA;
		esac;
	next (c_as_count_s) :=
		case
			stateA = send1 & c_as_count_s < 254 : c_as_count_s + 1;
			TRUE : c_as_count_s;
		esac;
	next (c_tgs_count_s) :=
		case
			stateA = send2 & c_tgs_count_s < 254 : c_tgs_count_s + 1;
			TRUE : c_tgs_count_s;
		esac;
	next (as_count_s) :=
		case
			stateS = send1 & as_count_s < 254 : as_count_s + 1;
			TRUE : as_count_s;
		esac;
	next (c_as_count_r) :=
		case
			stateA = receive1 & c_as_count_r < 254 : c_as_count_r + 1;
			TRUE : c_as_count_r;
		esac;
	next (stateB) :=
		case
			stateA = send2 : send1;
			TRUE : stateB;
		esac;
	next (stateS) :=
		case
			stateS = receive1 : send1;
			TRUE : stateS;
		esac;