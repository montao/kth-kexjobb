
MODULE main
VAR
	stateA : {idle, send1, receive1, send2, receive2, send3, receive3};
	stateB : {idle, send1, receive1};
	stateS : {idle, send, receive};
	stateI : {idle, eavesdrop, remove, store, send};
	XcounterF : 0 .. 255;
	YcounterE : 0 .. 255;
	Ssend_KabA : 0 .. 255; --number of times S sent keys to A
	Breceive_KabA : 0 .. 255; -- number of times B received keys from A
	Areceive_KabS : 0 .. 255; --number of times A received keys from S
	Abegin_initB : 0 .. 255; --number of times A started request
	Bend_respA : 0 .. 255; -- number of times B ended responses with A
	c_as_count_s : 0 .. 255;
	c_as_count_r : 0 .. 255;
	c_tgs_count_s : 0 .. 255;
	c_tgs_count_r : 0 .. 255;
	c_v_count_s : 0 .. 255;
	c_v_count_r : 0 .. 255;
	as_count_s : 0 .. 255;
	as_count_r : 0 .. 255;
	tgs_count_s : 0 .. 255;
	tgs_count_r : 0 .. 255;
	v_count_s : 0 .. 255;
	v_count_r : 0 .. 255;
ASSIGN
	init (stateA) := send1; --start by sending to S
	init (stateB) := idle;
	init (stateS) := idle;
	init (stateI) := idle; --initial states are idle
	init (c_as_count_s) := 0;
	init (c_as_count_r) := 0;
	init (c_tgs_count_s) := 0;
	init (c_tgs_count_r) := 0;
	init (c_v_count_s) := 0;
	init (c_v_count_r) := 0;
	init (as_count_s) := 0;
	init (as_count_r) := 0;
	init (tgs_count_s) := 0;
	init (tgs_count_r) := 0;
	init (v_count_s) := 0;
	init (v_count_r) := 0;
	next (stateA) :=
		case
			stateS = send : send2;
			stateB = send1 : receive3;
			TRUE : stateA;
		esac;
	next (c_as_count_s) :=
		case
			stateA = send1 & c_as_count_s < 254 : c_as_count_s + 1;
			TRUE : c_as_count_s;
		esac;
	next (c_as_count_r) :=
		case
			stateS = receive1 & c_as_count_r < 254 : c_as_count_r + 1;
			TRUE : c_as_count_r;
		esac;
	next (stateB) :=
		case
			stateA = send2 : send1;
			TRUE : stateB;
		esac;
	next (stateS) :=
		case
			stateS = receive : send;
			TRUE : stateS;
		esac;
	next (Ssend_KabA) :=
		case
			(stateS = send) & (Ssend_KabA < 255) : Ssend_KabA + 1;
			TRUE : Ssend_KabA;
		esac;
SPEC AG (Abegin_initB >= Bend_respA)