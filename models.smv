MODULE UART (proc, output, input)
VAR	Rx : unsigned word [ 8 ]; Tx : unsigned word [ 8 ];--vector of bytes
ASSIGN
	next (Rx) :=
		case
			proc = read : input; proc = write : output; TRUE : (Rx);
		esac;
	next (Tx) :=
		case
			proc = write : output; proc = read : input; TRUE : (Tx);
		esac;		
MODULE MEM (proc, input, output)
VAR K : unsigned word [ 8 ]; data : array 0 .. 7 of array 0 .. 7 of unsigned word [ 8 ];
ASSIGN
    init (data[1][0]) := K; 
    next (K) :=
        case
            output = data[1][0] : output;
            TRUE : K;
        esac;
MODULE main
VAR	proc : {idle, read, write}; input : unsigned word [ 8 ]; 
    output : unsigned word [ 8 ]; 
    memory : MEM (proc, input, output); 
    uart0 : UART (proc, input, output); 
ASSIGN init (input) := memory.data[0][0]; init (output) := memory.data[0][0];
LTLSPEC G (output != memory.data[1][0]) -> G (memory.K = next (memory.K))