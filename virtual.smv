MODULE MMU (proc, pageNumber, offset)

VAR
	pagetable : array 0 .. 4 of 0..7; -- 5 pages of virtual memory
	
ASSIGN 
	next (pagetable[0]) := -- initiate paging between virtual page 0 and physical page 3
		case
			TRUE : 3;
		esac;	
	next (pagetable[1]) := -- initiate paging between virtual page 1 and physical page 7
		case
			TRUE : 7;
		esac;
	next (pagetable[2]) := -- initiate paging between virtual page 2 and physical page 5
		case
			TRUE : 5;
		esac;	
	next (pagetable[3]) := -- initiate paging between virtual page 3 and physical page 7
		case
			TRUE : 2;
		esac;
		next (pagetable[4]) := -- initiate paging between virtual page 3 and physical page 7
		case
			TRUE : 4;
		esac;	
	
MODULE MEM (proc, mmu, proc2memValue)
DEFINE
	secureAddress := 6;
	securePage := 6;
VAR
	data : array 0 .. 7 of array 0..3 of unsigned word [ 4 ]; -- A simple 128-byte address space

ASSIGN	

	next (data[secureAddress][0]) :=
		case
			proc = write & mmu.pageNumber = securePage & mmu.offset = 0 : proc2memValue; -- We verify this doesn't occur
			TRUE : data[secureAddress][0];
		esac;
	next (data[2][0]) := -- frame 3. 
		case
			proc = write & mmu.pageNumber = 3 & mmu.offset = 0 : proc2memValue; -- We verify this occurs
			TRUE : data[2][0];
		esac;
	next (data[3][0]) := -- frame 4. 
		case
			proc = write & mmu.pageNumber = 0 & mmu.offset = 0 : proc2memValue; -- We verify this occurs
			TRUE : data[3][0];
		esac;
			next (data[4][0]) := -- frame 5. 
		case
			proc = write & mmu.pageNumber = 4 & mmu.offset = 0 : proc2memValue; -- We verify this occurs
			TRUE : data[4][0];
		esac;
	next (data[7][0]) := -- frame 7. 
		case
			proc = write & mmu.pageNumber = 1 & mmu.offset = 0 : proc2memValue; -- We verify this occurs
			TRUE : data[7][0];
		esac;
	next (data[5][0]) := -- frame 5. 
		case
			proc = write & mmu.pageNumber = 2 & mmu.offset = 0 : proc2memValue; -- We verify this occurs
			TRUE : data[5][0];
		esac;
				
MODULE CPU
DEFINE
	offset := 0; -- offset is not implemented
VAR
	-- registers are not implemented
	-- registers : array 0 .. 16 of unsigned word [16];
	proc : {read, write};
    proc2memValue : unsigned word [4];
ASSIGN	

	next (proc2memValue) := proc2memValue;
		next (proc) := proc;
MODULE main
	
VAR
	pageNumber : 0 .. 4; -- we vary the page numbers during the verification	
	cpu : CPU;	
	mmu : MMU (cpu.proc, pageNumber, cpu.offset);
	memory : MEM (cpu.proc, mmu, cpu.proc2memValue);
ASSIGN	
	 next (pageNumber) := pageNumber;
		
	 LTLSPEC G ((cpu.proc = write) -> (next(memory.data[mmu.pagetable[pageNumber]][0]) = cpu.proc2memValue))
	 LTLSPEC G mmu.pagetable[pageNumber] != memory.secureAddress -> memory.data[memory.secureAddress][0] = next (memory.data[memory.secureAddress][0])
	