MODULE PT -- page table 
VAR
	ptes : array 0 .. 15 of array 0..1 of unsigned word [ 16 ]; -- valid, virtual page, modified, protection, page frame number

MODULE MMU (proc, proc2memValue, pageNumber, offset)
VAR
	tlb : array 0 .. 15 of unsigned word [ 16 ];
	pt : PT;
	--A TLB has a small fixed number of slots that contain page table entries, which map virtual addresses to physical addresses. 
	-- It is typically a content-addressable memory (CAM), in which the search key is the virtual address and the search result is a physical address.
	mem2read : 0 .. 3; -- if not in tlb
	mmu2mainValue : array 0 .. 8 of unsigned word [ 16 ];
ASSIGN
	next (tlb[0]) :=
		case
			proc = write : tlb[pageNumber];
			TRUE : tlb[0];
		esac;
	next (mmu2mainValue[0]) :=
		case
			proc = read & pageNumber = 0 & offset = 0 & tlb[0] = 0uo16_0
			: pt.ptes[0][0];
			TRUE : 0uo16_0; -- respond void if data in TLB is void
		esac;
	next (mem2read) :=
		case
			proc = read & pageNumber = 0 | pageNumber = 32 & tlb[0] = 0uo16_0 :
			pageNumber;
			TRUE : mem2read;
		esac;
MODULE MEM (proc, mmu)
DEFINE
	secureAddress := 27;
VAR
	data : array 0 .. 32 of unsigned word [ 16 ]; -- main memory. 1024 page frames.
	mem2proc : unsigned word [ 16 ]; -- if CPU reads a word
	dataAddress : 0..1;
ASSIGN
	next (dataAddress) := mmu.mem2read mod 2;
		
	next (mem2proc) :=
		case
			proc = read & mmu.tlb[mmu.mem2read] != 0uo16_0 : mmu.tlb[mmu.mem2read];
			TRUE : data[dataAddress];
		esac;
	next (data[secureAddress]) :=
		case
			proc = write & mmu.pageNumber = 5 & mmu.offset = 0 : 0uo16_666;
			TRUE : data[secureAddress];
		esac;
	next (data[0]) :=
		case
			proc = write & mmu.pageNumber = 0 : mmu.tlb[mmu.pageNumber];
			TRUE : data[secureAddress];
		esac;
		
MODULE CPU
VAR
	--registers : array 0 .. 16 of unsigned word [16];
	proc : {idle, read, write, read2UART, write2UART, setDMAaddress};

MODULE main
VAR
	pageNumber : 0 .. 15;
	offset : 0..4;
	cpu : CPU;	
	mmu : MMU (cpu.proc, proc2memValue, pageNumber, offset);
	memory : MEM (cpu.proc, mmu);
ASSIGN
	LTLSPEC G (pageNumber != 5 & offset != 0) -> G
	(memory.data[memory.secureAddress] = next (memory.data[memory.secureAddress]))	